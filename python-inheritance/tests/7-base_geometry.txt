==========================
The ``7-base_geometry`` module
==========================

Using ``BaseGeometry``
-----------------------

First import ``BaseGeometry`` from the ``7-base_geometry`` module:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Basic instantiation:

    >>> bg = BaseGeometry()
    >>> type(bg)
    <class '7-base_geometry.BaseGeometry'>

Testing area() method:

    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

Testing integer_validator with valid integers:

    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)
    >>> bg.integer_validator("big_number", 1000000)

Testing with exactly 1 (edge case for > 0):

    >>> bg.integer_validator("one", 1)

Testing with missing arguments:

    >>> bg.integer_validator("age")
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

Testing with no arguments:

    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Testing with too many arguments:

    >>> bg.integer_validator("age", 1, 2)
    Traceback (most recent call last):
    TypeError: integer_validator() takes 3 positional arguments but 4 were given

Testing with zero:

    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ValueError: age must be greater than 0

Testing with negative number:

    >>> bg.integer_validator("distance", -4)
    Traceback (most recent call last):
    ValueError: distance must be greater than 0

Testing with string:

    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
    TypeError: name must be an integer

Testing with float:

    >>> bg.integer_validator("age", 4.5)
    Traceback (most recent call last):
    TypeError: age must be an integer

Testing with tuple:

    >>> bg.integer_validator("age", (4,))
    Traceback (most recent call last):
    TypeError: age must be an integer

Testing with list:

    >>> bg.integer_validator("age", [3])
    Traceback (most recent call last):
    TypeError: age must be an integer

Testing with dict:

    >>> bg.integer_validator("age", {1: 2})
    Traceback (most recent call last):
    TypeError: age must be an integer

Testing with boolean True:

    >>> bg.integer_validator("age", True)
    Traceback (most recent call last):
    TypeError: age must be an integer

Testing with boolean False:

    >>> bg.integer_validator("age", False)
    Traceback (most recent call last):
    TypeError: age must be an integer

Testing with set:

    >>> bg.integer_validator("age", {3, 4})
    Traceback (most recent call last):
    TypeError: age must be an integer

Testing with frozenset:

    >>> bg.integer_validator("age", frozenset([1, 2, 3]))
    Traceback (most recent call last):
    TypeError: age must be an integer

Testing with None:

    >>> bg.integer_validator("age", None)
    Traceback (most recent call last):
    TypeError: age must be an integer

Testing with bytes:

    >>> bg.integer_validator("age", b'4')
    Traceback (most recent call last):
    TypeError: age must be an integer

Testing with bytearray:

    >>> bg.integer_validator("age", bytearray(b'4'))
    Traceback (most recent call last):
    TypeError: age must be an integer

Testing with range object:

    >>> bg.integer_validator("age", range(5))
    Traceback (most recent call last):
    TypeError: age must be an integer

Testing with complex number:

    >>> bg.integer_validator("age", complex(1, 2))
    Traceback (most recent call last):
    TypeError: age must be an integer

Testing with class:

    >>> bg.integer_validator("age", BaseGeometry)
    Traceback (most recent call last):
    TypeError: age must be an integer

Testing with inf:

    >>> bg.integer_validator("age", float('inf'))
    Traceback (most recent call last):
    TypeError: age must be an integer

Testing with NaN:

    >>> bg.integer_validator("age", float('nan'))
    Traceback (most recent call last):
    TypeError: age must be an integer

Testing different parameter names:

    >>> bg.integer_validator("", 5)
    >>> bg.integer_validator("with spaces", 10)
    >>> bg.integer_validator("12345", 50)

Testing with special string names:

    >>> try:
    ...     bg.integer_validator("", 0)
    ... except ValueError as e:
    ...     print(e)
     must be greater than 0

Testing error message format:

    >>> try:
    ...     bg.integer_validator("special_name", "not_int")
    ... except TypeError as e:
    ...     print(e)
    special_name must be an integer

    >>> try:
    ...     bg.integer_validator("another_name", -10)
    ... except ValueError as e:
    ...     print(e)
    another_name must be greater than 0