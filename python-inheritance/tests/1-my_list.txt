======================
The ``1-my_list`` module
======================

Using ``MyList``
-------------------

First import ``MyList`` from the ``1-my_list`` module:

    >>> MyList = __import__('1-my_list').MyList

Now use it:

Basic instantiation:

    >>> my_list = MyList()
    >>> print(my_list)
    []

Check that MyList inherits from list:

    >>> issubclass(MyList, list)
    True

Using append method (inherited from list):

    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]

Testing print_sorted method:

    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

Check that the original list is unchanged:

    >>> print(my_list)
    [1, 4, 2, 3, 5]

Testing with already sorted list:

    >>> sorted_list = MyList()
    >>> sorted_list.append(1)
    >>> sorted_list.append(2)
    >>> sorted_list.append(3)
    >>> sorted_list.append(4)
    >>> sorted_list.append(5)
    >>> sorted_list.print_sorted()
    [1, 2, 3, 4, 5]
    >>> print(sorted_list)
    [1, 2, 3, 4, 5]

Testing with negative numbers:

    >>> neg_list = MyList()
    >>> neg_list.append(5)
    >>> neg_list.append(-2)
    >>> neg_list.append(3)
    >>> neg_list.append(-8)
    >>> neg_list.append(0)
    >>> print(neg_list)
    [5, -2, 3, -8, 0]
    >>> neg_list.print_sorted()
    [-8, -2, 0, 3, 5]
    >>> print(neg_list)
    [5, -2, 3, -8, 0]

Testing with empty list:

    >>> empty_list = MyList()
    >>> empty_list.print_sorted()
    []

Testing with single element:

    >>> single = MyList()
    >>> single.append(5)
    >>> single.print_sorted()
    [5]

Testing with duplicate values:

    >>> dup_list = MyList()
    >>> dup_list.append(3)
    >>> dup_list.append(1)
    >>> dup_list.append(3)
    >>> dup_list.append(2)
    >>> dup_list.append(3)
    >>> dup_list.print_sorted()
    [1, 2, 3, 3, 3]